#include <cstdio>
#include <initializer_list>
constexpr int K=260,N=22;
int Ch,n,k,ans[K],stk[K<<1],*top=stk,i;
bool v[N][1<<N];
constexpr int ANS[][260]{
	{},
	{0,2},
	{0,0,2,2},
	{0,0,0,2,0,4,2},
	{0,0,0,0,2,0,0,4,2,4,2,2},
	{0,0,0,0,0,2,0,0,0,4,0,4,4,2,2,4,4,4,0,2},
	{0,0,0,0,0,0,2,0,0,0,0,4,0,0,4,6,0,4,2,0,4,8,2,6,4,4,0,6,2,4,0,0,2},
	{0,0,0,0,0,0,0,2,0,0,0,0,0,4,0,0,0,4,4,4,0,4,4,0,0,4,4,4,4,8,4,6,4,4,4,8,0,6,2,12,0,4,4,2,4,4,0,4,4,0,0,0,0,2},
	{0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,4,0,0,0,0,4,4,0,4,2,4,2,4,0,0,4,4,0,4,0,8,8,4,6,2,6,12,0,8,0,8,6,8,0,8,4,10,0,8,6,8,2,8,4,8,4,4,8,6,4,4,4,4,2,8,0,2,2,4,4,0,0,4,2,4,0,0,0,0,0,0,0,2},
	{0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,0,0,4,4,0,0,4,0,8,2,0,4,2,0,4,4,0,0,4,0,4,4,4,8,8,0,4,8,6,4,12,4,4,2,6,4,12,0,12,8,4,4,10,0,12,0,4,4,16,2,16,4,4,8,6,8,12,4,0,8,16,8,12,4,8,4,12,0,6,8,8,4,6,0,12,8,4,8,8,0,4,4,8,4,4,4,8,0,8,6,0,0,4,4,4,0,6,0,4,0,4,0,0,0,0,4,4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,4,4,0,0,0,4,0,4,6,2,0,4,0,4,4,4,0,0,0,4,0,4,0,4,4,4,8,0,4,4,8,8,4,10,0,12,4,0,2,8,4,12,4,8,2,12,8,8,0,12,0,12,4,12,4,8,0,6,12,8,2,12,6,12,4,4,8,12,4,18,4,4,4,8,8,20,8,12,10,20,4,6,8,12,0,24,4,8,8,4,16,12,6,12,8,4,4,12,2,20,4,4,6,12,4,16,12,4,8,10,4,12,10,8,8,8,4,8,4,12,4,14,0,8,8,8,10,8,0,12,4,8,4,8,0,8,0,8,4,8,2,10,2,4,4,8,0,4,2,4,4,8,0,8,0,4,0,2,4,4,4,0,0,4,4,2,2,0,4,0,0,4,0,0,0,0,0,0,0,4,2,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,4,0,0,0,0,4,0,4,2,4,0,4,4,0,0,8,6,0,0,0,0,4,0,4,0,0,4,4,4,4,4,0,0,4,4,12,8,6,4,4,8,8,0,6,4,4,0,8,4,12,4,8,4,10,0,8,10,16,0,8,4,8,4,8,10,8,4,16,4,16,0,8,6,4,4,8,0,20,8,8,4,12,8,10,4,6,4,8,4,12,8,12,12,16,4,24,8,12,4,12,12,8,12,16,8,24,8,16,0,16,8,20,4,22,8,4,12,12,4,16,8,18,4,18,8,12,12,8,2,12,16,16,12,0,8,20,4,12,4,14,12,16,12,14,12,16,12,12,4,20,8,12,12,8,4,14,12,22,8,12,0,24,4,8,8,20,4,8,8,16,8,22,4,12,16,10,8,10,4,12,4,16,8,20,0,10,4,20,4,8,8,12,0,4,12,28,0,16,4,8,4,8,4,8,4,12,4,16,4,16,8,12,0,8,8,4,4,4,4,8,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,4,0,4,2,0,4,0,0,8,2,0,4,8,0,4,0,0,0,4,0,4,0,0,0,4,4,4,4,0,4,0,0,0,8,4,4,12,2,8,4,4,4,12,4,2,4,4,4,8,0,12,4,0,4,12,4,4,4,4,4,20,0,12,2,4,4,12,4,24,2,8,12,8,0,8,12,4,4,16,2,20,4,0,8,10,8,4,4,12,4,24,2,12,4,0,4,12,0,16,10,8,4,8,8,20,6,8,8,16,4,20,8,0,8,16,8,18,4,20,12,24,4,20,12,12,12,20,8,24,14,4,16,16,4,20,4,8,6,32,6,28,8,12,4,22,4,8,20,4,4,32,4,12,8,12,20,16,10,36,4,8,14,8,12,18,8,16,16,20,0,32,16,4,8,8,12,20,16,8,12,18,8,20,18,24,4,16,8,20,12,20,20,20,6,24,12,8,6,16,4,22,12,16,16,20,8,20,12,20,6,28,8},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,4,0,4,2,0,0,4,0,0,4,4,0,8,4,4,0,0,4,2,0,4,0,4,0,0,0,0,4,4,4,4,0,0,4,0,0,0,4,8,0,8,4,6,4,0,8,0,4,18,4,0,0,12,4,4,4,4,8,12,0,0,4,12,4,4,0,0,0,16,4,12,0,12,4,0,4,4,12,20,4,16,0,12,4,12,12,12,4,6,4,10,6,12,4,12,0,8,12,12,4,4,12,8,8,16,4,16,0,8,0,16,4,16,4,8,8,4,0,20,8,8,8,16,6,8,12,12,0,16,4,12,8,12,4,12,4,8,8,12,8,16,16,20,4,12,8,20,16,28,12,18,0,28,4,24,12,20,12,16,4,22,12,8,12,20,4,16,8,12,12,20,0,28,12,12,12,28,8,32,12,4,8,12,12,24,16,10,12,32,8,16,16,16,12,28,0,28,12,8,12,20,8,14,20,20,12,36,12},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,4,0,4,2,0,0,0,4,0,0,4,0,4,4,4,4,6,0,0,0,4,0,8,0,4,0,0,0,0,0,4,4,4,4,0,0,0,4,0,0,0,4,4,4,4,4,4,2,8,0,4,0,4,2,8,8,4,4,8,4,4,4,8,6,6,4,8,0,8,8,4,4,8,0,0,0,8,4,8,4,4,0,8,0,8,0,12,6,12,4,20,4,12,8,8,4,0,12,12,0,16,4,16,6,12,8,0,6,12,12,4,6,12,4,12,4,8,8,16,0,16,4,12,0,14,0,12,4,12,8,12,8,20,10,16,8,8,0,12,4,8,10,12,0,12,12,8,0,20,8,8,8,12,8,12,6,10,0,8,0,12,8,16,4,16,12,20,12,12,14,28,6,4,4,24,12,8,20,20,12,20,6,12,8,28,12,16,4,20,12,20,4,28,8,12,12,16,4,24,4,20,8,20,8},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,4,0,4,2,0,0,0,0,4,0,0,4,0,0,8,4,0,0,8,0,4,0,0,4,4,0,8,2,0,0,0,0,0,4,4,4,4,0,0,0,0,4,0,0,0,4,4,0,8,0,4,4,2,4,4,4,0,0,2,4,8,0,4,8,4,0,12,0,8,4,4,12,4,0,8,12,4,0,8,0,12,8,0,0,8,0,8,4,0,0,8,0,4,0,4,8,8,0,12,6,8,4,12,4,20,4,8,4,10,0,4,12,8,8,12,6,16,0,4,8,12,4,12,6,8,8,16,4,16,4,0,4,18,4,8,4,4,8,20,2,12,8,0,12,16,4,12,4,8,8,20,4,12,4,12,8,24,0,24,16,4,4,18,8,12,8,0,8,10,0,16,0,8,4,16,0,16,4,6,8,16,4,8,8,8,8,20,10,24,4,12,8,10,12,20,12,8,8,16,4},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,4,0,4,2,0,0,0,0,0,4,0,0,4,0,0,4,8,0,0,0,4,4,0,0,4,2,8,0,4,0,4,0,4,0,0,0,4,4,4,4,0,0,0,0,0,4,0,0,0,4,4,0,4,4,0,4,4,2,4,0,8,0,0,2,0,0,12,0,0,4,8,4,4,4,4,4,0,0,8,12,8,4,8,4,4,4,8,2,10,4,4,4,8,4,8,4,4,0,0,0,4,4,4,0,4,0,12,4,12,0,8,2,8,0,12,4,8,8,0,16,8,4,8,0,8,0,20,14,8,0,12,0,8,4,4,8,16,16,8,0,16,0,16,4,4,4,8,12,16,8,4,0,8,4,16,0,16,4,0,8,8,4,8,8,24,4,16,8,16,8,16,6,18,8,0,4,12,0,12,8,20,4,32,12,12,4,16,12,12,4,12,8,0,0,8,4},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,4,0,4,2,0,0,0,0,0,0,4,0,0,4,0,0,4,4,4,0,0,0,4,0,4,0,0,0,8,4,8,0,0,0,4,0,0,4,2,4,4,4,4,0,0,0,0,0,0,4,0,0,0,4,4,0,4,0,4,0,4,4,2,4,0,4,4,0,2,0,0,0,8,4,0,0,8,4,4,4,8,0,0,0,4,4,4,4,8,8,8,4,0,8,8,0,8,4,8,4,12,4,8,0,4,8,0,4,4,0,4,0,8,4,0,0,8,4,12,0,8,4,4,6,4,0,8,0,8,4,12,4,8,4,4,8,0,4,12,6,16,0,12,0,4,12,8,2,8,8,12,0,12,16,12,4,16,0,4,0,20,8,8,4,2,8,12,0,16,0,16,0,4,4,14,16,4,4,12,4,4,4,8,12,4,4,20,0,12,12,20,4},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,4,0,4,2,0,0,0,0,0,0,0,4,0,0,4,0,0,4,4,0,4,0,0,0,4,0,0,4,0,0,4,0,12,0,0,4,2,0,4,0,0,0,8,4,8,4,0,0,0,0,0,0,0,4,0,0,0,4,4,0,4,0,0,4,0,4,4,2,4,0,4,0,4,2,0,0,0,0,8,0,4,0,4,4,8,0,4,8,0,0,0,0,4,8,0,4,4,8,12,0,0,0,12,0,4,4,0,12,24,0,4,0,0,12,8,2,2,4,0,0,8,0,12,8,0,4,4,0,12,0,8,0,12,0,8,2,0,4,4,0,4,8,8,8,4,4,4,4,4,4,12,2,8,4,4,4,0,8,8,0,8,8,16,8,8,0,4,4,24,0,20,4,8,4,16,0,8,12,8,0,12,0,12,4,8,8,12,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,2,0,0,0,0,0,0,0,0,4,0,0,4,0,0,4,4,0,0,4,0,0,0,4,0,0,0,4,0,4,0,4,4,4,0,0,0,4,0,8,0,0,4,4,8,4,0,4,2,0,0,0,0,0,4,0,0,0,4,4,0,4,0,0,0,4,0,4,4,2,4,0,4,0,0,6,0,0,0,0,0,8,0,0,4,4,0,8,4,4,0,4,4,0,0,0,4,4,0,4,8,4,0,8,4,4,0,4,4,4,4,0,0,12,8,12,4,4,0,8,8,4,0,4,4,0,4,8,8,4,4,8,0,8,0,12,8,4,0,8,4,8,4,0,2,4,0,4,0,12,0,0,12,8,4,4,0,4,0,12,6,4,8,4,0,4,4,0,0,8,4,12,4,8,0,8,8,8,4,12,4},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,2,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0,4,4,0,0,0,4,0,0,0,4,0,0,0,0,4,4,0,4,0,4,0,4,0,0,0,0,4,4,0,8,6,4,4,4,0,0,0,4,0,4,0,0,4,0,0,0,4,4,0,4,0,0,0,0,4,0,4,4,2,4,0,4,0,0,2,4,0,0,0,0,0,8,0,0,0,8,0,4,4,8,0,0,4,0,4,0,0,4,4,0,0,4,12,0,0,4,4,4,0,8,0,8,0,0,0,12,4,8,0,4,8,4,4,4,4,0,4,4,0,4,8,12,4,4,4,0,8,12,2,10,0,12,0,4,4,12,4,12,0,0,6,0,0,4,8,4,0,4,4,8,4,4,8,0,0,4,2,12,4,4,4},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,2,0,0,0,0,0,0,0,0,0,0,4,0,0,4,0,0,4,4,0,0,0,0,4,0,0,0,4,0,0,0,0,0,8,0,4,0,0,4,0,0,4,0,0,0,0,0,8,4,4,4,8,0,4,4,0,0,0,0,4,0,0,8,2,0,0,4,4,0,4,0,0,0,0,0,4,0,4,4,2,4,0,4,0,0,2,0,4,0,0,0,0,0,8,0,0,0,4,4,4,0,8,4,0,0,4,0,0,4,0,4,4,0,0,4,4,4,4,0,4,0,4,4,4,0,8,4,0,0,8,0,8,8,0,0,4,0,8,12,0,0,0,0,8,0,0,4,8,0,12,12,0,4,12,0,8,4,8,8,4,0,12,8,4,4,8,0,4,6,0,4,16,0}
};
constexpr int WTCL[5][8]{
	{2},
	{4},
	{4,4},
	{4,0,4,2},
	{4,0,0,4,0,0,4,4}
};
template<typename T>
inline void r(T&x){
	while((Ch=getchar())<48);
	x=Ch&15;
	while((Ch=getchar())>47)x=(x<<1)+(x<<3)+(Ch&15);
}
template<typename...Ar>
inline void r(Ar&&...x){std::initializer_list<int>{(r(x),0)...};}
template<typename T>
void w(T&&x){
	if(x>9)w(x/10);
	putchar(x%10|48);
}
int main(){
	freopen("sequence.in","r",stdin);
	freopen("sequence.out","w",stdout);
	r(n,k);
	if(n<22){
		for(i=1;i<=k;i++)printf("%d ",ANS[n][i]);
		return 0;
	}
	if(k<=100){
		int j,i=n-1,t=1,la=1,now=0,kk=1;
		while(k){
			for(j=0;j<i&&k;j++){
				k--;
				putchar(48);
				putchar(32);
			}
			for(j=0;j<la&&k;j++){
				k--;
				putchar(WTCL[now][j]|48);
				putchar(32);
			}
			now++;
			i-=kk;
			la=t;
			t<<=1;
			kk++;
		}
		return 0;
	}
	for(int s=0;s<<1<1<<n;s++){
		int i,t,j,cnt;
		for(i=1;i<1<<n&&top-stk<=k<<1;i++){
			t=i;
			j=cnt=0;
			while(t){
				// printf("%d: %d %d %d\n",cnt+1,j,t&-t&s,t);
				j=j<<1|bool(t&-t&s);
				t^=t&-t;
				cnt++;
			}
			if(!v[cnt][j]){
				// printf("%d %d %d %d\n",s,i,j,cnt);
				v[cnt][j]=true;
				*++top=j;
				*++top=cnt;
			}
		}
		// printf("%d %d\n",s,top-stk>>1);
		ans[(top-stk)>>1]++;
		while(top!=stk){
			v[*top][top[-1]]=false;
			top-=2;
		}
	}
	for(i=1;i<=k;i++){
		w(ans[i]<<1);
		putchar(32);
	}
	return 0;
}

